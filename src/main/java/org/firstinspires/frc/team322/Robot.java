// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.firstinspires.frc.team322;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.firstinspires.frc.team322.commands.*;
import org.firstinspires.frc.team322.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<String> chooser = new SendableChooser<>();
    Preferences robotPrefs;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    public static ChassisSensors chassisSensors;
    public static LowerArm lowerArm;
    public static EndArm endArm;
    public static ClimbArm climbArm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static LEDControl ledControl;
    public static MidArm midArm;
    
    public static DriverStation DS;
    public static UsbCamera frontCameraServer, rearCameraServer;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        chassisSensors = new ChassisSensors();
        climbArm = new ClimbArm();
        endArm = new EndArm();
        lowerArm = new LowerArm();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS 
        ledControl = new LEDControl();
        midArm = new MidArm();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        DS = DriverStation.getInstance();
        
    	//Setup Camera
    	frontCameraServer = CameraServer.getInstance().startAutomaticCapture();
    	frontCameraServer.setResolution(640, 360);
    	
    	rearCameraServer = CameraServer.getInstance().startAutomaticCapture();
    	rearCameraServer.setResolution(640, 360);
    	
    	//Setup roboPrefs
    	robotPrefs = Preferences.getInstance();
        
        // Add commands to Autonomous Sendable Chooser
        chooser.addDefault("Do Nothing", "Do Nothing");
        chooser.addObject("Drive Forward", "Drive Forward");
        chooser.addObject("Drive Backward", "Drive Backward");
        chooser.addObject("Score on Near Switch", "Score on Near Switch");
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
    }

    @Override
    public void disabledPeriodic() {
    	getRoboPrefs();
    	debugPrint();
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        RobotMap.gameData = DS.getGameSpecificMessage();
    	getRoboPrefs();
    	switch (chooser.getSelected()) {
    		case "Do Nothing":				autonomousCommand = new DoNothing();
    		break;
    		
    		case "Drive Forward":			autonomousCommand = new DriveForward();
    		break;
    		
    		case "Drive Backward":			autonomousCommand = new DriveBackward();
            break;
            
            case "Cross Line Outside":		autonomousCommand = new AutonCrossLineOutside();
            break;
            
            case "Cross Line Center":		autonomousCommand = new AutonCrossLineCenter();
    		break;
            
    		case "Score on Near Switch":	autonomousCommand = new ScoreOnNearSwitch();
    		break;
    		
    		default: 						autonomousCommand = new DoNothing();
    		break;
    	}
    	// schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
    	getRoboPrefs();
    	Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	Robot.chassis.resetEncoders();
    	if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
    	getRoboPrefs();
    	Scheduler.getInstance().run();
    }
    
	public void getRoboPrefs() {
		RobotMap.autonDistance = robotPrefs.getDouble("Autonomous Distance", RobotMap.autonDistance);
		RobotMap.autonSpeed = robotPrefs.getDouble("Autonomous Speed", RobotMap.autonSpeed);
		RobotMap.autonRotation = robotPrefs.getDouble("Autonomous Rotation", RobotMap.autonRotation);
    	RobotMap.autonTime = robotPrefs.getDouble("Autonomous Time", RobotMap.autonTime);
    	SmartDashboard.putNumber("Autonomous Speed", RobotMap.autonSpeed);
    	SmartDashboard.putNumber("Autonomous Rotation", RobotMap.autonRotation);
    	SmartDashboard.putNumber("Autonomous Distance", RobotMap.autonDistance);
    	SmartDashboard.putNumber("Autonomous Time", RobotMap.autonTime);
	}
    
	public void debugPrint() {
		System.out.println("Gyro Angle X" + chassisSensors.getAngleX());
		System.out.println("Gyro Angle Y" + chassisSensors.getAngleY());
		System.out.println("Gyro Angle Z" + chassisSensors.getAngleZ());
    	System.out.println();
    	System.out.println("X-Axis " + chassisSensors.getAccelX());
    	System.out.println("Y-Axis " + chassisSensors.getAccelY());
    	System.out.println("Z-Axis " + chassisSensors.getAccelZ());
    	System.out.println();
    	System.out.println("Left Front Distance " + chassis.getEncoderData(1));
    	System.out.println("Left Rear Distance " + chassis.getEncoderData(2));
    	System.out.println("Right Front Distance " + chassis.getEncoderData(3));
    	System.out.println("Right Rear Distance " + chassis.getEncoderData(4));
    	System.out.println();
    	System.out.println();
	}
}
